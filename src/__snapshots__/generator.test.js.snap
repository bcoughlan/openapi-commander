// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`snapshots generates petstore 1`] = `
"/*
 * This code is generated. Do not modify this file.
 */

/* eslint-disable no-unused-vars */

const fs = require('fs/promises')
const { Command, Argument, Option } = require('commander')
const program = new Command()

function httpRequest(url, {method, body, headers}) {
  return new Promise((resolve, reject) => {
    const client = url.startsWith('https') ? require('https') : require('http')
    const request = client.request(url, {headers, method}, (response) => {
      const body = []
      response.on('data', (chunk) => body.push(chunk))
      response.on('end', () => {
        resolve({body: body.join(''), status: response.statusCode, headers: response.headers})
      })
    })
    request.on('aborted', (err) => reject(err))
    request.on('error', (err) => reject(err))
    if (body) request.write(body)
    request.end()
  })
}

async function request(method, baseUrl, path, { pathParams, queryParams, headers, body, contentType }, requestImpl) {
  try {
    var fullUrl = new URL(baseUrl)
  } catch (err) {
    err.message = \`Invalid base URL: \${baseUrl}\`
    throw err
  }

  const definedParams = Object.entries(queryParams).filter(e => e[1] !== undefined)
  fullUrl.search = new URLSearchParams(definedParams).toString()
  if (!fullUrl.pathname.endsWith('/')) fullUrl.pathname += '/'
  fullUrl.pathname += path.split('/').map(part => {
    if (part.startsWith('{') && part.endsWith('}')) {
      return pathParams[part.substring(1, part.length - 1)]
    }
    return part
  }).join('/').slice(1)

  if (body) headers['Content-Type'] = contentType
  headers['Accept'] = 'application/json'

  if (requestImpl === 'debug') {
    console.log(method.toUpperCase(), fullUrl.toString())
    for (const [name, value] of Object.entries(headers)) {
      console.log(\`\${name}: \${value}\`)
    }
    if (body) {
      console.log()
      console.log(body)
    }
  } else {
    // eslint-disable-next-line no-undef
    const response = await httpRequest(fullUrl.toString(), {method, body, headers})
    console.error(\\"Status:\\", response.status) //stderr so body can be piped
    
    if (response.headers['content-type']?.startsWith('application/json')) {
      try {
        console.log(JSON.stringify(JSON.parse(response.body), null, 2))
      } catch (e) {
        //For misbehaving APIs
        console.log(response.body)
      }
    } else {
      console.log(response.body)
    }
  }
}

function printExamples(examplesMapping) {
  for (const [type, examples] of Object.entries(examplesMapping)) {
    for (const example of examples) {
      console.log(\`Example for \${type}:\`)
      console.log(example)
    }
  }
}

function getGlobalOptions() {
  return program.opts()
}

program.option('-d, --debug', 'Print the HTTP request instead of sending it')
program.option('-s, --server <server>', 'Server to use')
program.option('-a, --auth <auth>', 'Authorization header to send')
const defaultServer = 'https://petstore3.swagger.io/api/v3'

/* ============== pet ============== */
const pet = program.command('pet')
pet.description('Everything about your Pets')

const updatePet = pet.command('updatePet')
updatePet.command('examples').action(() => { printExamples({\\"application/json\\":[\\"{\\\\n  \\\\u001b[31m\\\\\\"id\\\\\\"\\\\u001b[39m: \\\\u001b[32m10\\\\u001b[39m,\\\\n  \\\\u001b[31m\\\\\\"name\\\\\\"\\\\u001b[39m: \\\\u001b[31m\\\\\\"doggie\\\\\\"\\\\u001b[39m,\\\\n  \\\\u001b[31m\\\\\\"category\\\\\\"\\\\u001b[39m: {\\\\n    \\\\u001b[31m\\\\\\"id\\\\\\"\\\\u001b[39m: \\\\u001b[32m1\\\\u001b[39m,\\\\n    \\\\u001b[31m\\\\\\"name\\\\\\"\\\\u001b[39m: \\\\u001b[31m\\\\\\"Dogs\\\\\\"\\\\u001b[39m\\\\n  },\\\\n  \\\\u001b[31m\\\\\\"photoUrls\\\\\\"\\\\u001b[39m: [\\\\n    \\\\u001b[31m\\\\\\"string\\\\\\"\\\\u001b[39m\\\\n  ],\\\\n  \\\\u001b[31m\\\\\\"tags\\\\\\"\\\\u001b[39m: [\\\\n    {\\\\n      \\\\u001b[31m\\\\\\"id\\\\\\"\\\\u001b[39m: \\\\u001b[32m0\\\\u001b[39m,\\\\n      \\\\u001b[31m\\\\\\"name\\\\\\"\\\\u001b[39m: \\\\u001b[31m\\\\\\"string\\\\\\"\\\\u001b[39m\\\\n    }\\\\n  ],\\\\n  \\\\u001b[31m\\\\\\"status\\\\\\"\\\\u001b[39m: \\\\u001b[31m\\\\\\"available\\\\\\"\\\\u001b[39m\\\\n}\\"],\\"application/xml\\":[{\\"id\\":10,\\"name\\":\\"doggie\\",\\"category\\":{\\"id\\":1,\\"name\\":\\"Dogs\\"},\\"photoUrls\\":[\\"string\\"],\\"tags\\":[{\\"id\\":0,\\"name\\":\\"string\\"}],\\"status\\":\\"available\\"}],\\"application/x-www-form-urlencoded\\":[{\\"id\\":10,\\"name\\":\\"doggie\\",\\"category\\":{\\"id\\":1,\\"name\\":\\"Dogs\\"},\\"photoUrls\\":[\\"string\\"],\\"tags\\":[{\\"id\\":0,\\"name\\":\\"string\\"}],\\"status\\":\\"available\\"}]}) })
updatePet.description('Update an existing pet')
  .addArgument(new Argument('<body>', 'Path to a file containing the request body.'))
  .addOption(new Option('--body-type <bodyType>', 'Content type of the body file').choices([\\"application/json\\",\\"application/xml\\",\\"application/x-www-form-urlencoded\\"]).default('application/json'))
  .action(async function(...args) {
    const opt = args[args.length - 2]
    const headers = {}
    const pathParams = {}
    const queryParams = {}
    const globalOpts = getGlobalOptions()
    if (globalOpts.auth) headers.Authorization = globalOpts.auth

    const requestType = globalOpts.debug ? 'debug' : 'request'
    request('put', globalOpts.server ?? defaultServer, '/pet', {
      pathParams, queryParams, headers,
      body: await fs.readFile(args[args.length - 3], 'utf-8'),
      contentType: opt.bodyType || 'application/json'    }, requestType)
  })

const addPet = pet.command('addPet')
addPet.command('examples').action(() => { printExamples({\\"application/json\\":[\\"{\\\\n  \\\\u001b[31m\\\\\\"id\\\\\\"\\\\u001b[39m: \\\\u001b[32m10\\\\u001b[39m,\\\\n  \\\\u001b[31m\\\\\\"name\\\\\\"\\\\u001b[39m: \\\\u001b[31m\\\\\\"doggie\\\\\\"\\\\u001b[39m,\\\\n  \\\\u001b[31m\\\\\\"category\\\\\\"\\\\u001b[39m: {\\\\n    \\\\u001b[31m\\\\\\"id\\\\\\"\\\\u001b[39m: \\\\u001b[32m1\\\\u001b[39m,\\\\n    \\\\u001b[31m\\\\\\"name\\\\\\"\\\\u001b[39m: \\\\u001b[31m\\\\\\"Dogs\\\\\\"\\\\u001b[39m\\\\n  },\\\\n  \\\\u001b[31m\\\\\\"photoUrls\\\\\\"\\\\u001b[39m: [\\\\n    \\\\u001b[31m\\\\\\"string\\\\\\"\\\\u001b[39m\\\\n  ],\\\\n  \\\\u001b[31m\\\\\\"tags\\\\\\"\\\\u001b[39m: [\\\\n    {\\\\n      \\\\u001b[31m\\\\\\"id\\\\\\"\\\\u001b[39m: \\\\u001b[32m0\\\\u001b[39m,\\\\n      \\\\u001b[31m\\\\\\"name\\\\\\"\\\\u001b[39m: \\\\u001b[31m\\\\\\"string\\\\\\"\\\\u001b[39m\\\\n    }\\\\n  ],\\\\n  \\\\u001b[31m\\\\\\"status\\\\\\"\\\\u001b[39m: \\\\u001b[31m\\\\\\"available\\\\\\"\\\\u001b[39m\\\\n}\\"],\\"application/xml\\":[{\\"id\\":10,\\"name\\":\\"doggie\\",\\"category\\":{\\"id\\":1,\\"name\\":\\"Dogs\\"},\\"photoUrls\\":[\\"string\\"],\\"tags\\":[{\\"id\\":0,\\"name\\":\\"string\\"}],\\"status\\":\\"available\\"}],\\"application/x-www-form-urlencoded\\":[{\\"id\\":10,\\"name\\":\\"doggie\\",\\"category\\":{\\"id\\":1,\\"name\\":\\"Dogs\\"},\\"photoUrls\\":[\\"string\\"],\\"tags\\":[{\\"id\\":0,\\"name\\":\\"string\\"}],\\"status\\":\\"available\\"}]}) })
addPet.description('Add a new pet to the store')
  .addArgument(new Argument('<body>', 'Path to a file containing the request body.'))
  .addOption(new Option('--body-type <bodyType>', 'Content type of the body file').choices([\\"application/json\\",\\"application/xml\\",\\"application/x-www-form-urlencoded\\"]).default('application/json'))
  .action(async function(...args) {
    const opt = args[args.length - 2]
    const headers = {}
    const pathParams = {}
    const queryParams = {}
    const globalOpts = getGlobalOptions()
    if (globalOpts.auth) headers.Authorization = globalOpts.auth

    const requestType = globalOpts.debug ? 'debug' : 'request'
    request('post', globalOpts.server ?? defaultServer, '/pet', {
      pathParams, queryParams, headers,
      body: await fs.readFile(args[args.length - 3], 'utf-8'),
      contentType: opt.bodyType || 'application/json'    }, requestType)
  })

const findPetsByStatus = pet.command('findPetsByStatus')
findPetsByStatus.description('Finds Pets by status')
  .addOption(new Option('-s1 --status <status>', 'Status values that need to be considered for filter').choices(['available', 'pending', 'sold']))
  .action(async function(...args) {
    const opt = args[args.length - 2]
    const headers = {}
    const pathParams = {}
    const queryParams = {}
    if (opt['status'] !== undefined && opt['status'] !== null) queryParams['status'] = opt['status']
    const globalOpts = getGlobalOptions()
    if (globalOpts.auth) headers.Authorization = globalOpts.auth

    const requestType = globalOpts.debug ? 'debug' : 'request'
    request('get', globalOpts.server ?? defaultServer, '/pet/findByStatus', {
      pathParams, queryParams, headers,
    }, requestType)
  })

const findPetsByTags = pet.command('findPetsByTags')
findPetsByTags.description('*DEPRECATED* Finds Pets by tags')
  .addOption(new Option('-t --tags <tags>', 'Tags to filter by'))
  .action(async function(...args) {
    const opt = args[args.length - 2]
    const headers = {}
    const pathParams = {}
    const queryParams = {}
    if (opt['tags'] !== undefined && opt['tags'] !== null) queryParams['tags'] = opt['tags']
    const globalOpts = getGlobalOptions()
    if (globalOpts.auth) headers.Authorization = globalOpts.auth

    const requestType = globalOpts.debug ? 'debug' : 'request'
    request('get', globalOpts.server ?? defaultServer, '/pet/findByTags', {
      pathParams, queryParams, headers,
    }, requestType)
  })

const getPetById = pet.command('getPetById')
getPetById.description('Find pet by ID')
  .addArgument(new Argument('<petId>', 'ID of pet to return'))
  .action(async function(...args) {
    const headers = {}
    const pathParams = {}
    pathParams['petId'] = args[0]
    const queryParams = {}
    const globalOpts = getGlobalOptions()
    if (globalOpts.auth) headers.Authorization = globalOpts.auth

    const requestType = globalOpts.debug ? 'debug' : 'request'
    request('get', globalOpts.server ?? defaultServer, '/pet/{petId}', {
      pathParams, queryParams, headers,
    }, requestType)
  })

const updatePetWithForm = pet.command('updatePetWithForm')
updatePetWithForm.description('Updates a pet in the store with form data')
  .addArgument(new Argument('<petId>', 'ID of pet that needs to be updated'))
  .addOption(new Option('-n --name <name>', 'Name of pet that needs to be updated'))
  .addOption(new Option('-s1 --status <status>', 'Status of pet that needs to be updated'))
  .action(async function(...args) {
    const opt = args[args.length - 2]
    const headers = {}
    const pathParams = {}
    pathParams['petId'] = args[0]
    const queryParams = {}
    if (opt['name'] !== undefined && opt['name'] !== null) queryParams['name'] = opt['name']
    if (opt['status'] !== undefined && opt['status'] !== null) queryParams['status'] = opt['status']
    const globalOpts = getGlobalOptions()
    if (globalOpts.auth) headers.Authorization = globalOpts.auth

    const requestType = globalOpts.debug ? 'debug' : 'request'
    request('post', globalOpts.server ?? defaultServer, '/pet/{petId}', {
      pathParams, queryParams, headers,
    }, requestType)
  })

const deletePet = pet.command('deletePet')
deletePet.description('Deletes a pet')
  .addArgument(new Argument('<petId>', 'Pet id to delete'))
  .addOption(new Option('-a --apiKey <apiKey>', ''))
  .action(async function(...args) {
    const opt = args[args.length - 2]
    const headers = {}
    if (opt['api_key'] !== undefined && opt['api_key'] !== null) headers['api_key'] = opt['api_key']
    const pathParams = {}
    pathParams['petId'] = args[0]
    const queryParams = {}
    const globalOpts = getGlobalOptions()
    if (globalOpts.auth) headers.Authorization = globalOpts.auth

    const requestType = globalOpts.debug ? 'debug' : 'request'
    request('delete', globalOpts.server ?? defaultServer, '/pet/{petId}', {
      pathParams, queryParams, headers,
    }, requestType)
  })

const uploadFile = pet.command('uploadFile')
uploadFile.command('examples').action(() => { printExamples({\\"application/octet-stream\\":[\\"string\\"]}) })
uploadFile.description('uploads an image')
  .addArgument(new Argument('<petId>', 'ID of pet to update'))
  .addOption(new Option('--body <body>', 'Path to a file containing the request body.'))
  .addOption(new Option('-a --additionalMetadata <additionalMetadata>', 'Additional Metadata'))
  .action(async function(...args) {
    const opt = args[args.length - 2]
    const headers = {}
    const pathParams = {}
    pathParams['petId'] = args[0]
    const queryParams = {}
    if (opt['additionalMetadata'] !== undefined && opt['additionalMetadata'] !== null) queryParams['additionalMetadata'] = opt['additionalMetadata']
    const globalOpts = getGlobalOptions()
    if (globalOpts.auth) headers.Authorization = globalOpts.auth

    const requestType = globalOpts.debug ? 'debug' : 'request'
    request('post', globalOpts.server ?? defaultServer, '/pet/{petId}/uploadImage', {
      pathParams, queryParams, headers,
      body: await fs.readFile(opt['body'], 'utf-8'),
      contentType: opt.bodyType || 'application/octet-stream'    }, requestType)
  })

/* ============== store ============== */
const store = program.command('store')
const getInventory = store.command('getInventory')
getInventory.description('Returns pet inventories by status')
  .action(async function(...args) {
    const headers = {}
    const pathParams = {}
    const queryParams = {}
    const globalOpts = getGlobalOptions()
    if (globalOpts.auth) headers.Authorization = globalOpts.auth

    const requestType = globalOpts.debug ? 'debug' : 'request'
    request('get', globalOpts.server ?? defaultServer, '/store/inventory', {
      pathParams, queryParams, headers,
    }, requestType)
  })

const placeOrder = store.command('placeOrder')
placeOrder.command('examples').action(() => { printExamples({\\"application/json\\":[\\"{\\\\n  \\\\u001b[31m\\\\\\"id\\\\\\"\\\\u001b[39m: \\\\u001b[32m10\\\\u001b[39m,\\\\n  \\\\u001b[31m\\\\\\"petId\\\\\\"\\\\u001b[39m: \\\\u001b[32m198772\\\\u001b[39m,\\\\n  \\\\u001b[31m\\\\\\"quantity\\\\\\"\\\\u001b[39m: \\\\u001b[32m7\\\\u001b[39m,\\\\n  \\\\u001b[31m\\\\\\"shipDate\\\\\\"\\\\u001b[39m: \\\\u001b[31m\\\\\\"2019-08-24T14:15:22Z\\\\\\"\\\\u001b[39m,\\\\n  \\\\u001b[31m\\\\\\"status\\\\\\"\\\\u001b[39m: \\\\u001b[31m\\\\\\"approved\\\\\\"\\\\u001b[39m,\\\\n  \\\\u001b[31m\\\\\\"complete\\\\\\"\\\\u001b[39m: \\\\u001b[34mtrue\\\\u001b[39m\\\\n}\\"],\\"application/xml\\":[{\\"id\\":10,\\"petId\\":198772,\\"quantity\\":7,\\"shipDate\\":\\"2019-08-24T14:15:22Z\\",\\"status\\":\\"approved\\",\\"complete\\":true}],\\"application/x-www-form-urlencoded\\":[{\\"id\\":10,\\"petId\\":198772,\\"quantity\\":7,\\"shipDate\\":\\"2019-08-24T14:15:22Z\\",\\"status\\":\\"approved\\",\\"complete\\":true}]}) })
placeOrder.description('Place an order for a pet')
  .addOption(new Option('--body <body>', 'Path to a file containing the request body.'))
  .addOption(new Option('--body-type <bodyType>', 'Content type of the body file').choices([\\"application/json\\",\\"application/xml\\",\\"application/x-www-form-urlencoded\\"]).default('application/json'))
  .action(async function(...args) {
    const opt = args[args.length - 2]
    const headers = {}
    const pathParams = {}
    const queryParams = {}
    const globalOpts = getGlobalOptions()
    if (globalOpts.auth) headers.Authorization = globalOpts.auth

    const requestType = globalOpts.debug ? 'debug' : 'request'
    request('post', globalOpts.server ?? defaultServer, '/store/order', {
      pathParams, queryParams, headers,
      body: await fs.readFile(opt['body'], 'utf-8'),
      contentType: opt.bodyType || 'application/json'    }, requestType)
  })

const getOrderById = store.command('getOrderById')
getOrderById.description('Find purchase order by ID')
  .addArgument(new Argument('<orderId>', 'ID of order that needs to be fetched'))
  .action(async function(...args) {
    const headers = {}
    const pathParams = {}
    pathParams['orderId'] = args[0]
    const queryParams = {}
    const globalOpts = getGlobalOptions()
    if (globalOpts.auth) headers.Authorization = globalOpts.auth

    const requestType = globalOpts.debug ? 'debug' : 'request'
    request('get', globalOpts.server ?? defaultServer, '/store/order/{orderId}', {
      pathParams, queryParams, headers,
    }, requestType)
  })

const deleteOrder = store.command('deleteOrder')
deleteOrder.description('Delete purchase order by ID')
  .addArgument(new Argument('<orderId>', 'ID of the order that needs to be deleted'))
  .action(async function(...args) {
    const headers = {}
    const pathParams = {}
    pathParams['orderId'] = args[0]
    const queryParams = {}
    const globalOpts = getGlobalOptions()
    if (globalOpts.auth) headers.Authorization = globalOpts.auth

    const requestType = globalOpts.debug ? 'debug' : 'request'
    request('delete', globalOpts.server ?? defaultServer, '/store/order/{orderId}', {
      pathParams, queryParams, headers,
    }, requestType)
  })

/* ============== user ============== */
const user = program.command('user')
user.description('Operations about user')

const createUser = user.command('createUser')
createUser.command('examples').action(() => { printExamples({\\"application/json\\":[\\"{\\\\n  \\\\u001b[31m\\\\\\"id\\\\\\"\\\\u001b[39m: \\\\u001b[32m10\\\\u001b[39m,\\\\n  \\\\u001b[31m\\\\\\"username\\\\\\"\\\\u001b[39m: \\\\u001b[31m\\\\\\"theUser\\\\\\"\\\\u001b[39m,\\\\n  \\\\u001b[31m\\\\\\"firstName\\\\\\"\\\\u001b[39m: \\\\u001b[31m\\\\\\"John\\\\\\"\\\\u001b[39m,\\\\n  \\\\u001b[31m\\\\\\"lastName\\\\\\"\\\\u001b[39m: \\\\u001b[31m\\\\\\"James\\\\\\"\\\\u001b[39m,\\\\n  \\\\u001b[31m\\\\\\"email\\\\\\"\\\\u001b[39m: \\\\u001b[31m\\\\\\"john@email.com\\\\\\"\\\\u001b[39m,\\\\n  \\\\u001b[31m\\\\\\"password\\\\\\"\\\\u001b[39m: \\\\u001b[31m\\\\\\"12345\\\\\\"\\\\u001b[39m,\\\\n  \\\\u001b[31m\\\\\\"phone\\\\\\"\\\\u001b[39m: \\\\u001b[31m\\\\\\"12345\\\\\\"\\\\u001b[39m,\\\\n  \\\\u001b[31m\\\\\\"userStatus\\\\\\"\\\\u001b[39m: \\\\u001b[32m1\\\\u001b[39m\\\\n}\\"],\\"application/xml\\":[{\\"id\\":10,\\"username\\":\\"theUser\\",\\"firstName\\":\\"John\\",\\"lastName\\":\\"James\\",\\"email\\":\\"john@email.com\\",\\"password\\":\\"12345\\",\\"phone\\":\\"12345\\",\\"userStatus\\":1}],\\"application/x-www-form-urlencoded\\":[{\\"id\\":10,\\"username\\":\\"theUser\\",\\"firstName\\":\\"John\\",\\"lastName\\":\\"James\\",\\"email\\":\\"john@email.com\\",\\"password\\":\\"12345\\",\\"phone\\":\\"12345\\",\\"userStatus\\":1}]}) })
createUser.description('Create user')
  .addOption(new Option('--body <body>', 'Path to a file containing the request body.'))
  .addOption(new Option('--body-type <bodyType>', 'Content type of the body file').choices([\\"application/json\\",\\"application/xml\\",\\"application/x-www-form-urlencoded\\"]).default('application/json'))
  .action(async function(...args) {
    const opt = args[args.length - 2]
    const headers = {}
    const pathParams = {}
    const queryParams = {}
    const globalOpts = getGlobalOptions()
    if (globalOpts.auth) headers.Authorization = globalOpts.auth

    const requestType = globalOpts.debug ? 'debug' : 'request'
    request('post', globalOpts.server ?? defaultServer, '/user', {
      pathParams, queryParams, headers,
      body: await fs.readFile(opt['body'], 'utf-8'),
      contentType: opt.bodyType || 'application/json'    }, requestType)
  })

const createUsersWithListInput = user.command('createUsersWithListInput')
createUsersWithListInput.command('examples').action(() => { printExamples({\\"application/json\\":[\\"[\\\\n  {\\\\n    \\\\u001b[31m\\\\\\"id\\\\\\"\\\\u001b[39m: \\\\u001b[32m10\\\\u001b[39m,\\\\n    \\\\u001b[31m\\\\\\"username\\\\\\"\\\\u001b[39m: \\\\u001b[31m\\\\\\"theUser\\\\\\"\\\\u001b[39m,\\\\n    \\\\u001b[31m\\\\\\"firstName\\\\\\"\\\\u001b[39m: \\\\u001b[31m\\\\\\"John\\\\\\"\\\\u001b[39m,\\\\n    \\\\u001b[31m\\\\\\"lastName\\\\\\"\\\\u001b[39m: \\\\u001b[31m\\\\\\"James\\\\\\"\\\\u001b[39m,\\\\n    \\\\u001b[31m\\\\\\"email\\\\\\"\\\\u001b[39m: \\\\u001b[31m\\\\\\"john@email.com\\\\\\"\\\\u001b[39m,\\\\n    \\\\u001b[31m\\\\\\"password\\\\\\"\\\\u001b[39m: \\\\u001b[31m\\\\\\"12345\\\\\\"\\\\u001b[39m,\\\\n    \\\\u001b[31m\\\\\\"phone\\\\\\"\\\\u001b[39m: \\\\u001b[31m\\\\\\"12345\\\\\\"\\\\u001b[39m,\\\\n    \\\\u001b[31m\\\\\\"userStatus\\\\\\"\\\\u001b[39m: \\\\u001b[32m1\\\\u001b[39m\\\\n  }\\\\n]\\"]}) })
createUsersWithListInput.description('Creates list of users with given input array')
  .addOption(new Option('--body <body>', 'Path to a file containing the request body.'))
  .action(async function(...args) {
    const opt = args[args.length - 2]
    const headers = {}
    const pathParams = {}
    const queryParams = {}
    const globalOpts = getGlobalOptions()
    if (globalOpts.auth) headers.Authorization = globalOpts.auth

    const requestType = globalOpts.debug ? 'debug' : 'request'
    request('post', globalOpts.server ?? defaultServer, '/user/createWithList', {
      pathParams, queryParams, headers,
      body: await fs.readFile(opt['body'], 'utf-8'),
      contentType: opt.bodyType || 'application/json'    }, requestType)
  })

const loginUser = user.command('loginUser')
loginUser.description('Logs user into the system')
  .addOption(new Option('-u --username <username>', 'The user name for login'))
  .addOption(new Option('-p --password <password>', 'The password for login in clear text'))
  .action(async function(...args) {
    const opt = args[args.length - 2]
    const headers = {}
    const pathParams = {}
    const queryParams = {}
    if (opt['username'] !== undefined && opt['username'] !== null) queryParams['username'] = opt['username']
    if (opt['password'] !== undefined && opt['password'] !== null) queryParams['password'] = opt['password']
    const globalOpts = getGlobalOptions()
    if (globalOpts.auth) headers.Authorization = globalOpts.auth

    const requestType = globalOpts.debug ? 'debug' : 'request'
    request('get', globalOpts.server ?? defaultServer, '/user/login', {
      pathParams, queryParams, headers,
    }, requestType)
  })

const logoutUser = user.command('logoutUser')
logoutUser.description('Logs out current logged in user session')
  .action(async function(...args) {
    const headers = {}
    const pathParams = {}
    const queryParams = {}
    const globalOpts = getGlobalOptions()
    if (globalOpts.auth) headers.Authorization = globalOpts.auth

    const requestType = globalOpts.debug ? 'debug' : 'request'
    request('get', globalOpts.server ?? defaultServer, '/user/logout', {
      pathParams, queryParams, headers,
    }, requestType)
  })

const getUserByName = user.command('getUserByName')
getUserByName.description('Get user by user name')
  .addArgument(new Argument('<username>', 'The name that needs to be fetched. Use user1 for testing. '))
  .action(async function(...args) {
    const headers = {}
    const pathParams = {}
    pathParams['username'] = args[0]
    const queryParams = {}
    const globalOpts = getGlobalOptions()
    if (globalOpts.auth) headers.Authorization = globalOpts.auth

    const requestType = globalOpts.debug ? 'debug' : 'request'
    request('get', globalOpts.server ?? defaultServer, '/user/{username}', {
      pathParams, queryParams, headers,
    }, requestType)
  })

const updateUser = user.command('updateUser')
updateUser.command('examples').action(() => { printExamples({\\"application/json\\":[\\"{\\\\n  \\\\u001b[31m\\\\\\"id\\\\\\"\\\\u001b[39m: \\\\u001b[32m10\\\\u001b[39m,\\\\n  \\\\u001b[31m\\\\\\"username\\\\\\"\\\\u001b[39m: \\\\u001b[31m\\\\\\"theUser\\\\\\"\\\\u001b[39m,\\\\n  \\\\u001b[31m\\\\\\"firstName\\\\\\"\\\\u001b[39m: \\\\u001b[31m\\\\\\"John\\\\\\"\\\\u001b[39m,\\\\n  \\\\u001b[31m\\\\\\"lastName\\\\\\"\\\\u001b[39m: \\\\u001b[31m\\\\\\"James\\\\\\"\\\\u001b[39m,\\\\n  \\\\u001b[31m\\\\\\"email\\\\\\"\\\\u001b[39m: \\\\u001b[31m\\\\\\"john@email.com\\\\\\"\\\\u001b[39m,\\\\n  \\\\u001b[31m\\\\\\"password\\\\\\"\\\\u001b[39m: \\\\u001b[31m\\\\\\"12345\\\\\\"\\\\u001b[39m,\\\\n  \\\\u001b[31m\\\\\\"phone\\\\\\"\\\\u001b[39m: \\\\u001b[31m\\\\\\"12345\\\\\\"\\\\u001b[39m,\\\\n  \\\\u001b[31m\\\\\\"userStatus\\\\\\"\\\\u001b[39m: \\\\u001b[32m1\\\\u001b[39m\\\\n}\\"],\\"application/xml\\":[{\\"id\\":10,\\"username\\":\\"theUser\\",\\"firstName\\":\\"John\\",\\"lastName\\":\\"James\\",\\"email\\":\\"john@email.com\\",\\"password\\":\\"12345\\",\\"phone\\":\\"12345\\",\\"userStatus\\":1}],\\"application/x-www-form-urlencoded\\":[{\\"id\\":10,\\"username\\":\\"theUser\\",\\"firstName\\":\\"John\\",\\"lastName\\":\\"James\\",\\"email\\":\\"john@email.com\\",\\"password\\":\\"12345\\",\\"phone\\":\\"12345\\",\\"userStatus\\":1}]}) })
updateUser.description('Update user')
  .addArgument(new Argument('<username>', 'name that need to be deleted'))
  .addOption(new Option('--body <body>', 'Path to a file containing the request body.'))
  .addOption(new Option('--body-type <bodyType>', 'Content type of the body file').choices([\\"application/json\\",\\"application/xml\\",\\"application/x-www-form-urlencoded\\"]).default('application/json'))
  .action(async function(...args) {
    const opt = args[args.length - 2]
    const headers = {}
    const pathParams = {}
    pathParams['username'] = args[0]
    const queryParams = {}
    const globalOpts = getGlobalOptions()
    if (globalOpts.auth) headers.Authorization = globalOpts.auth

    const requestType = globalOpts.debug ? 'debug' : 'request'
    request('put', globalOpts.server ?? defaultServer, '/user/{username}', {
      pathParams, queryParams, headers,
      body: await fs.readFile(opt['body'], 'utf-8'),
      contentType: opt.bodyType || 'application/json'    }, requestType)
  })

const deleteUser = user.command('deleteUser')
deleteUser.description('Delete user')
  .addArgument(new Argument('<username>', 'The name that needs to be deleted'))
  .action(async function(...args) {
    const headers = {}
    const pathParams = {}
    pathParams['username'] = args[0]
    const queryParams = {}
    const globalOpts = getGlobalOptions()
    if (globalOpts.auth) headers.Authorization = globalOpts.auth

    const requestType = globalOpts.debug ? 'debug' : 'request'
    request('delete', globalOpts.server ?? defaultServer, '/user/{username}', {
      pathParams, queryParams, headers,
    }, requestType)
  })

if (require.main === module) {
  program.parseAsync(process.argv)
} else {
  module.exports = program
}
"
`;
